  list off

; QDOS SMSQ/E keys

; Compiled by: Marcos Cruz (programandala.net), 2016

; ==============================================================
; Acknowledgment

; This file was created with files and information from:

; GWASL assembler, by George Wilt, 2008,
; <http://gwiltprogs.info/>.
;
; QL Advanced User Guide (by Adrian Dickens, 1984)
;
; SMSQ/E sources, by Tonny Tebby et al.,
; <http://www.wlenerz.com/smsqe/>.

; ==============================================================
; History

; 2016-01-11: Added to the Sfera library.
;
; 2016-01-14: Reorganized. Titles.
;
; 2016-01-15: Added URLs to the credits.
;
; 2016-01-18: Modified in order to reuse it for other projects.
;
; 2016-01-22: Added SMS2 IOSS operations (file qdos.io from the
; SMSQ/E sources). Added QDOS errors (from "QDOS Low-Level
; Documentation", by unknown author; and from the sources of
; ToolKit III, by Martin Berndt, Ultrasoft.)
;
; 2016-01-24: Updated.

; ==============================================================
; Traps

; ----------------------------------------------
; Manager traps (trap #1)

; QDOS

mt_inf        equ   $00000000
mt_cjob       equ   $00000001 ; transient program area, allocate
mt_jinf       equ   $00000002
mt_rjob       equ   $00000004
mt_frjob      equ   $00000005 ; transient program area, release
mt_free       equ   $00000006
mt_trapv      equ   $00000007
mt_susjb      equ   $00000008
mt_reljb      equ   $00000009
mt_activ      equ   $0000000a
mt_prior      equ   $0000000b
mt_alloc      equ   $0000000c
mt_lnkfr      equ   $0000000d
mt_alres      equ   $0000000e ; resident procedure area, allocate
mt_reres      equ   $0000000f ; resident procedure area, total release only
mt_dmode      equ   $00000010
mt_ipcom      equ   $00000011
mt_baud       equ   $00000012
mt_rclck      equ   $00000013
mt_sclck      equ   $00000014
mt_aclck      equ   $00000015
mt_albas      equ   $00000016 ; SuperBASIC area, for interpreter only
mt_rebas      equ   $00000017 ; SuperBASIC area, for interpreter only
mt_alchp      equ   $00000018 ; common heap area
mt_rechp      equ   $00000019 ; common heap area, also released when owner job is deleted
mt_lxint      equ   $0000001a
mt_rxint      equ   $0000001b
mt_lpoll      equ   $0000001c
mt_rpoll      equ   $0000001d
mt_lschd      equ   $0000001e
mt_rschd      equ   $0000001f
mt_liod       equ   $00000020
mt_riod       equ   $00000021
mt_ldd        equ   $00000022
mt_rdd        equ   $00000023

; SMSQ/E

sms_info equ $00          ; get INFOrmation on SMS                             10
sms_crjb equ $01          ; CReate JoB                                          5
sms_injb equ $02          ; get INformation on JoB                             11
sms_rmjb equ $04          ; ReMove JoB                                         17
sms_frjb equ $05          ; Forced Remove JoB                                   7
sms_frtp equ $06          ; find largest FRee space in TPa                      8
sms_exv  equ $07          ; set EXception Vector                                6
sms_ssjb equ $08          ; SuSpend a JoB                                      21
sms_usjb equ $09          ; UnSuspend a JoB                                    22
sms_acjb equ $0a          ; ACtivate a JoB                                      1
sms_spjb equ $0b          ; Set Priority of JoB                                20
sms_alhp equ $0c          ; ALlocate in HeaP                                    2
sms_rehp equ $0d          ; RElease to HeaP                                    16
sms_arpa equ $0e          ; Allocate in Resident Procedure Area                 3
sms_dmod equ $10          ; set or read the Display MODe                        6
sms_hdop equ $11          ; do a Hardware Dependent OPeration                   9
sms_comm equ $12          ; set COMMuncation baud rate etc.                     4
sms_rrtc equ $13          ; Read Real Time Clock                               18
sms_srtc equ $14          ; Set Real Time Clock                                21
sms_artc equ $15          ; Adjust Real Time Clock                              3
sms_ampa equ $16          ; Allocate space in SuperBASIC area                   2
sms_rmpa equ $17          ; Release space in SuperBASIC area                   18
sms_achp equ $18          ; Allocate space in Common HeaP                       1
sms_rchp equ $19          ; Release space in Common HeaP                       16
sms_lexi equ $1a          ; Link in EXternal Interrupt action                  12
sms_rexi equ $1b          ; Remove EXternal Interrupt action                   17
sms_lpol equ $1c          ; Link in POLled action                              12
sms_rpol equ $1d          ; Remove POLled action                               17
sms_lshd equ $1e          ; Link in ScHeDuler action                           12
sms_rshd equ $1f          ; Remove ScHeDuler action                            17
sms_liod equ $20          ; Link in IO Device driver                           12
sms_riod equ $21          ; Remove IO Device driver                            17
sms_lfsd equ $22          ; Link in Filing System Device driver                12
sms_rfsd equ $23          ; Remove Filing System Device driver                 17
sms_trns equ $24          ; Set translation and error messages                 22
sms_xtop equ $25          ; External Operation [SMSQ]                          24
sms_lthg equ $26          ; Link in THinG [SMS2,EXT]                           13
sms_rthg equ $27          ; Remove THinG [SMS2,EXT]                            19
sms_uthg equ $28          ; Use THinG [SMS2,EXT]                               23
sms_fthg equ $29          ; Free THinG [SMS2,EXT]                               8
sms_zthg equ $2a          ; Zap THinG [SMS2,EXT]                               24
sms_nthg equ $2b          ; Next THinG [SMS2,EXT]                              14
sms_nthu equ $2c          ; Next Thing User [SMS2,EXT]                         15
sms_iopr equ $2e          ; IO PRiority [SMSQ]                                 11
sms_cach equ $2f          ; CACHe handling [SMSQ]                               4
sms_lldm equ $30          ; Link in Language Dependent Module [SMSQ]   Section 19
sms_lenq equ $31          ; Language ENQuiry [SMSQ]                    Section 19
sms_lset equ $32          ; Language SET [SMSQ]                        Section 19
sms_pset equ $33          ; Printer translate SET [SMSQ]               Section 19
sms_mptr equ $34          ; find a Message PoinTeR [SMSQ]              Section 19
sms_fprm equ $35          ; Find PReferred Module [SMSQ]               Section 19
sms_schp equ $38          ; Shrink alloaction in common heap [SMSQ]            19
sms_sevt equ $3a          ; Send event to job [SMSQ]                           20
sms_wevt equ $3b          ; Wait for event [SMSQ]                              23

; ----------------------------------------------
; IO allocation traps (trap #2)

; QDOS

io_open       equ   $00000001
io_close      equ   $00000002
io_formt      equ   $00000003
io_delet      equ   $00000004

; SMS


do_ioa   equ 2                     ; trap #2
do_rlioa equ 4                     ; trap #4

ioa_open equ $01                   ; OPEN IOSS channel
ioa_clos equ $02                   ; CLOSe IOSS channel
ioa_frmt equ $03                   ; FoRMaT medium on device
ioa_delf equ $04                   ; DELete file from device
ioa_sown equ $05                   ; Set OWNer of channel
ioa_cnam equ $06                   ; Fetch channel name

; Ownership keys

no_owner equ 0
myself   equ -1


; ----------------------------------------------
; Serial IO calls (trap #3)

; QDOS

io_pend       equ   $00000000
io_fbyte      equ   $00000001
io_fline      equ   $00000002
io_fstrg      equ   $00000003
io_edlin      equ   $00000004
io_sbyte      equ   $00000005
io_sstrg      equ   $00000007

; SMS

do_io equ 3                    ; trap #3
do_relio equ 4                    ; trap #4

iob_test equ $00                  ; TEST input
iob_fbyt equ $01                  ; Fetch BYTe from input
iob_flin equ $02                  ; Fetch LINe from input
iob_fmul equ $03                  ; Fetch MULtiple characters/bytes
iob_elin equ $04                  ; Edit LINe of characters
iob_sbyt equ $05                  ; Send BYTe to output
iob_smul equ $07                  ; Send MULtiple bytes

iow_xtop equ $09                  ; eXTernal OPeration on screen
iow_pixq equ $0a                  ; PIXel coordinate Query
iow_chrq equ $0b                  ; CHaRacter coordinate Query
iow_defb equ $0c                  ; DEFine Border
iow_defw equ $0d                  ; DEFine Window
iow_ecur equ $0e                  ; Enable CURsor
iow_dcur equ $0f                  ; Disable CURsor
iow_scur equ $10                  ; Set CURsor position (character coordinates)
iow_scol equ $11                  ; Set cursor COLumn
iow_newl equ $12                  ; put cursor on a NEW Line
iow_pcol equ $13                  ; move cursor to Previous COLumn
iow_ncol equ $14                  ; move cursor to Next COLumn
iow_prow equ $15                  ; move cursor to Prevous ROW
iow_nrow equ $16                  ; move cursor to Next ROW
iow_spix equ $17                  ; Set cursor to PIXel position
iow_scra equ $18                  ; SCRoll All of window
iow_scrt equ $19                  ; SCRoll Top of window (above cursor)
iow_scrb equ $1a                  ; SCRoll Bottom of window (below cursor)
iow_pana equ $1b                  ; PAN All of window
iow_panl equ $1e                  ; PAN cursor Line
iow_panr equ $1f                  ; PAN Right hand end of cursor line
iow_clra equ $20                  ; CLeaR All of window
iow_clrt equ $21                  ; CLeaR Top of window (above cursor)
iow_clrb equ $22                  ; CLeaR Bottom of window (below cursor)
iow_clrl equ $23                  ; CLeaR cursor Line
iow_clrr equ $24                  ; CLeaR Right hand side of cursor line
iow_font equ $25                  ; set / read FOuNT (font U.S.A.)
iow_rclr equ $26                  ; ReCoLouR a window
iow_spap equ $27                  ; Set PAPer colour
iow_sstr equ $28                  ; Set STRip colour
iow_sink equ $29                  ; Set INK colour
iow_sfla equ $2a                  ; Set FLash Attribute
iow_sula equ $2b                  ; Set UnderLine Attribute
iow_sova equ $2c                  ; Set OVerwrite Attributes
iow_ssiz equ $2d                  ; Set character SIZe
iow_blok equ $2e                  ; fill a BLOcK with colour
iow_donl equ $2f                  ; DO a pending newline

iog_dot  equ $30                  ; draw (list of) DOTs
iog_line equ $31                  ; draw (list of) LINEs
iog_arc  equ $32                  ; draw (list of) ARCs
iog_elip equ $33                  ; draw ELlIPse
iog_scal equ $34                  ; set graphics SCALe
iog_fill equ $35                  ; set area FILL
iog_sgcr equ $36                  ; Set Graphics CuRsor position

iof_chek equ $40                 ;   CHEcK all pending operations on file
iof_flsh equ $41                 ;   FLuSH all buffers
iof_posa equ $42                 ;   set file POSition to Absolute address
iofp_off equ $F0FFF0FF           ;   key in d1 returns sector 0 offset (direct sector access)
iof_posr equ $43                 ;   move file POSition Relative to current position
iof_minf equ $45                 ;   get Medium INFormation
iof_shdr equ $46                 ;   Set file HeaDeR
iof_rhdr equ $47                 ;   Read file HeaDeR
iof_load equ $48                 ;   (scatter) LOAD file
iof_save equ $49                 ;   (scatter) SAVE file
iof_rnam equ $4a                 ;   ReNAMe file [EXT]
iof_trnc equ $4b                 ;   TRuNCate file to current position [EXT]
iof_date equ $4c                 ;   set or get file DATEs [EXT,DD2]
iofd_get equ -1                  ;     d1 key, GET date (or version)
iofd_cur equ 0                   ;     d1 key, set CURrent date (or version)
iofd_upd equ 0                   ;     d2 key, set/get UPDate date
iofd_bak equ 2                   ;     d2 key, set/get BAcKup date
iof_mkdr equ $4d                 ;   MaKe DiRectory [DD2]
iof_vers equ $4e                 ;   set or get VERSion (d1 keys as iof.date) [DD2]
iof_xinf equ $4f                 ;   get eXtended INFormation [DD2]

; All keys higher than $4f are for pointer-driven CON devices.
; Please refer to the QPTR manual.

; ----------------------------------------------
; Screen output calls (trap #3)

sd_extop      equ   $00000009
sd_pxenq      equ   $0000000a
sd_chenq      equ   $0000000b
sd_bordr      equ   $0000000c
sd_wdef       equ   $0000000d
sd_cure       equ   $0000000e
sd_curs       equ   $0000000f
sd_pos        equ   $00000010
sd_tab        equ   $00000011
sd_nl         equ   $00000012
sd_pcol       equ   $00000013
sd_ncol       equ   $00000014
sd_prow       equ   $00000015
sd_nrow       equ   $00000016
sd_pixp       equ   $00000017
sd_scrol      equ   $00000018
sd_scrtp      equ   $00000019
sd_scrbt      equ   $0000001a
sd_pan        equ   $0000001b
sd_panln      equ   $0000001e
sd_panrt      equ   $0000001f
sd_clear      equ   $00000020
sd_clrtp      equ   $00000021
sd_clrbt      equ   $00000022
sd_clrln      equ   $00000023
sd_clrrt      equ   $00000024
sd_font       equ   $00000025
sd_recol      equ   $00000026
sd_setpa      equ   $00000027
sd_setst      equ   $00000028
sd_setin      equ   $00000029
sd_setfl      equ   $0000002a
sd_setul      equ   $0000002b
sd_setmd      equ   $0000002c
sd_setsz      equ   $0000002d
sd_fill       equ   $0000002e
sd_point      equ   $00000030
sd_line       equ   $00000031
sd_arc        equ   $00000032
sd_elips      equ   $00000033
sd_scale      equ   $00000034
sd_flood      equ   $00000035
sd_gcur       equ   $00000036

; ----------------------------------------------
; Filing system traps (trap #3)

fs_check      equ   $00000040
fs_flush      equ   $00000041
fs_posab      equ   $00000042
fs_posre      equ   $00000043
fs_mdinf      equ   $00000045
fs_heads      equ   $00000046
fs_headr      equ   $00000047
fs_load       equ   $00000048
fs_save       equ   $00000049

; ==============================================================
; vectored utilities

; ----------------------------------------------
; Supervisor mode routines

mm_alchp      equ   $000000c0 ; common heap area
mm_rechp      equ   $000000c2 ; common heap area, also released when owner job is deleted

io_serq       equ   $000000e8
io_serio      equ   $000000ea

; ----------------------------------------------
; Simplified trap routines

ut_windw      equ   $000000c4
ut_con        equ   $000000c6
ut_scr        equ   $000000c8
ut_err0       equ   $000000ca
ut_err        equ   $000000cc
ut_mint       equ   $000000ce
ut_mtext      equ   $000000d0

; ----------------------------------------------
; General utility routines

ut_link       equ   $000000d2
ut_unlnk      equ   $000000d4
mm_alloc      equ   $000000d8 ; heap allocation within the jobs own data area
mm_lnkfr      equ   $000000da ; heap allocation within the jobs own data area
io_qset       equ   $000000dc
io_qtest      equ   $000000de
io_qin        equ   $000000e0
io_qout       equ   $000000e2
io_qeof       equ   $000000e4
io_name       equ   $00000122

; ----------------------------------------------
; Basic utility routines

ut_cstr       equ   $000000e6
cn_date       equ   $000000ec
cn_day        equ   $000000ee
cn_ftod       equ   $000000f0
cn_itod       equ   $000000f2
cn_itobb      equ   $000000f4
cn_itobw      equ   $000000f6
cn_itobl      equ   $000000f8
cn_itohb      equ   $000000fa
cn_itohw      equ   $000000fc
cn_itohl      equ   $000000fe
cn_dtof       equ   $00000100
cn_dtoi       equ   $00000102
cn_btoib      equ   $00000104
cn_btoiw      equ   $00000106
cn_btoil      equ   $00000108
cn_htoib      equ   $0000010a
cn_htoiw      equ   $0000010c
cn_htoil      equ   $0000010e
bp_init       equ   $00000110
ca_gtint      equ   $00000112
ca_gtfp       equ   $00000114
ca_gtstr      equ   $00000116
ca_gtlin      equ   $00000118
bv_chrix      equ   $0000011a ; SuperBASIC area, space in RI stack
ri_exec       equ   $0000011c
ri_execb      equ   $0000011e
bp_let        equ   $00000120

; ----------------------------------------------
; Microdrive support routines

md_read       equ   $00000124
md_write      equ   $00000126
md_verin      equ   $00000128
md_sectr      equ   $0000012a

; ==============================================================
; System variables (QDOS)

sv_ident      equ   $00000000
sv_cheap      equ   $00000004
sv_chpfr      equ   $00000008
sv_free       equ   $0000000c
sv_basic      equ   $00000010
sv_trnsp      equ   $00000014
sv_trnfr      equ   $00000018
sv_respr      equ   $0000001c
sv_ramt       equ   $00000020
sv_rand       equ   $0000002e
sv_pollm      equ   $00000030
sv_tvmod      equ   $00000032
sv_scrst      equ   $00000033
sv_mcsta      equ   $00000034
sv_pcint      equ   $00000035
sv_netnr      equ   $00000037
sv_i2lst      equ   $00000038
sv_plist      equ   $0000003c
sv_shlst      equ   $00000040
sv_drlst      equ   $00000044
sv_ddlst      equ   $00000048
sv_keyq       equ   $0000004c
sv_trapv      equ   $00000050
sv_btpnt      equ   $00000054
sv_btbas      equ   $00000058
sv_bttop      equ   $0000005c
sv_jbtag      equ   $00000060
sv_jbmax      equ   $00000062
sv_jbpnt      equ   $00000064
sv_jbbas      equ   $00000068
sv_jbtop      equ   $0000006c
sv_chtag      equ   $00000070
sv_chmax      equ   $00000072
sv_chpnt      equ   $00000074
sv_chbas      equ   $00000078
sv_chtop      equ   $0000007c
sv_caps       equ   $00000088
sv_arbuf      equ   $0000008a
sv_ardel      equ   $0000008c
sv_arfrq      equ   $0000008e
sv_arcnt      equ   $00000090
sv_cqch       equ   $00000092
sv_wp         equ   $00000094
sv_sound      equ   $00000096
sv_ser1c      equ   $00000098
sv_ser2c      equ   $0000009c
sv_tmode      equ   $000000a0
sv_csub       equ   $000000a2
sv_timo       equ   $000000a6
sv_timov      equ   $000000a8
sv_fstat      equ   $000000aa
sv_prog       equ   $000000ac
sv_data       equ   $000000b0
sv_dest       equ   $000000b4
sv_thingl     equ   $000000b8
sv_mdrun      equ   $000000ee
sv_mdcnt      equ   $000000ef
sv_mddid      equ   $000000f0
sv_mdsta      equ   $000000f8
sv_fsdef      equ   $00000100
sv_fslst      equ   $00000140
sv_stacb      equ   $00000180
sv_stact      equ   $00000480
sv_trapo      equ   $00000054
sv_lxint      equ   $00000000
sv_axint      equ   $00000004
sv_lpoll      equ   $00000008
sv_apoll      equ   $0000000c
sv_lschd      equ   $00000010
sv_aschd      equ   $00000014
sv_lio        equ   $00000018
sv_aio        equ   $0000001c
sv_aopen      equ   $00000020
sv_aclos      equ   $00000024

; ==============================================================
; System variables (SMS2)

; ----------------------------------------------
; Machine identification

sys_idnt equ  $0000      ; long  system variables identifier

sysid_ql equ  $d2540000  ; QL (QDOS) system variable identifier
sysid_at equ  'S2AT'     ; SMS Atari system variable identifier
sysid_sq equ  'SMSQ'     ; SMSQ identifier

; ----------------------------------------------
; RAM allocation table

sys_chpb equ  $0004  ; long  Common HeaP Base
sys_chpf equ  $0008  ; long  Common HeaP Free space pointer
sys_fsbb equ  $000c  ; long  Filing system Slave Block area Base
sys_sbab equ  $0010  ; long  'QL SuperBASIC' Area Base
sys_tpab equ  $0014  ; long  Transient Program Area Base
sys_tpaf equ  $0018  ; long  Transient Program Area Free space pointer
sys_rpab equ  $001c  ; long  Resident Procedure Area Base
sys_ramt equ  $0020  ; long  user RAM Top
sys_mxfr equ  $0024  ; long  Maximum return from free memory call

sys_rtc  equ  $0028  ; long  real time (seconds)
sys_rtcf equ  $002c  ; word  real time fractional, count down

; ----------------------------------------------
; Odd working variables

sys_rand equ  $002e  ; word  RANDom number
sys_pict equ  $0030  ; word  Polling Interupt CounT
sys_dtyp equ  $0032  ; byte  Display TYPe (0=normal, 1=TV 625, 2=TV 525)
sys_dfrz equ  $0033  ; byte  Display FRoZen (T or F)
sys_qlmr equ  $0034  ; byte  QL Master chip Register value
sysqm__8 equ    3      ; mode 8 bit
sys_qlir equ  $0035  ; byte  QL Interrupt Register value
sys_rshd equ  $0036  ; byte  true to reschedule
sys_nnnr equ  $0037  ; byte  Network Node NumbeR
; ----------------------------------------------
; Action routine and driver lists

sys_exil equ  $0038  ; long  EXternal Interrupt action List
sys_poll equ  $003c  ; long  POLled action List
sys_shdl equ  $0040  ; long  ScHeDuler loop action List
sys_iodl equ  $0044  ; long  IO Driver List
sys_fsdl equ  $0048  ; long  Filing System Driver List

sys_ckyq equ  $004c  ; long  Current Keyboard Queue

sys_ertb equ  $0050  ; long  Exception Redirection Table Base

; ----------------------------------------------
; Resource allocation

; Filing system slave blocks, 8 byte entries, first byte 0 = unavailable
;              1 = vacant

sys_sbrp equ  $0054  ; long  Slave Block Running Pointer
sys_sbtb equ  $0058  ; long  Slave Block Table Base
sys_sbtt equ  $005c  ; long  Slave Block Table Top

sys_jbtg equ  $0060  ; word  next JoB TaG
sys_jbtp equ  $0062  ; word  highest JoB in table (ToP one)
sys_jbpt equ  $0064  ; long  current JoB PoinTer
sys_jbtb equ  $0068  ; long  JoB Table Base
sys_jbtt equ  $006c  ; long  JoB Table Top

sys_chtg equ  $0070  ; word  next CHannel TaG
sys_chtp equ  $0072  ; word  highest CHannel in table (ToP one)
sys_chpt equ  $0074  ; long  last checked CHannel PoinTer
sys_chtb equ  $0078  ; long  CHannel Table Base
sys_chtt equ  $007c  ; long  CHannel Table Top
sys_frbl equ  $0080  ; long  FRee Block List (to be returned to common heap)
sys_tsdd equ  $0084  ; byte  Thor flag
sys_capr equ  $0084  ; long  Capslock routine address (if positive)

; ----------------------------------------------
; Fixed peripheral working area (QL)

sys_perw equ  $0088  ; to $00ac

sys_caps equ  $0088  ; word  CAPS lock
sys_lchr equ  $008a  ; word  Last CHaRacter
sys_rdel equ  $008c  ; word  Repeat DELay (20ms units)
sys__rdel equ     25
sys_rtim equ  $008e  ; word  Repeat TIMe (20ms units)
sys__rtim equ      2
sys_rcnt equ  $0090  ; word  Repeat CouNTer (decremented every 20ms)
sys_swtc equ  $0092  ; word  SWiTch queues Character
sys_hstt equ  $0094  ; byte  additional hardware status
sys_tmsv equ  $0095  ; byte  sys_tmod saved by MDV routines ****
sys_qlbp equ  $0096  ; byte  QL BeePing
sys_brk  equ  $0097  ; byte  set by keyboard break
sys_qls1r equ $0098  ; long  pointer to QL serial 1 receive buffer
sys_qls2r equ $009c  ; long  pointer to QL serial 2 receive buffer
sys_tmod equ  $00a0  ; byte  QL transmit mode
sys_ptyp equ  $00a1  ; byte  processor type $00 = 68000/8, $30 = 68030 etc.
sys_immu equ    $01       ; internal MMU
sys_851m equ    $02       ; 68851 MMU
sys_ifpu equ    $04       ; internal FPU
sys_88xf equ    $08       ; 68881 68882 FPU
sys_csub equ  $00a2  ; long  subroutine to jump to on capslock
sys_stmo equ  $00a6  ; byte  serial xmit timeout
sys_dmiu equ  $00a6  ; byte  Atari msb DMA in use, lsb kill SER2 xmit
sys_stiu equ  $00a6  ; byte  msb Sector transfer in use
sys_mtyp equ  $00a7  ; byte  Machine TYPe / display type
sys__mtyp equ    $1e       ; machine ID bits
sys_blit  equ    +1       ; Blitter fitted
sys_herm  equ    +1       ; Hermes fitted
sys_mst   equ   $00       ; ordinary ST
sys_mstr  equ   $02       ; Mega ST or ST with RTC
sys_msta  equ   $04       ; Stacy
sys_mste  equ   $06       ; ordinary STE
sys_mmste equ   $08       ; Mega STE
sys_mgold equ   $0a       ; Gold card
sys_msgld equ   $0c       ; SuperGOLD card
sys_mfal  equ   $10       ; Falcon
sys_mq40  equ   $11       ; Q40
sys_mtt   equ   $18       ; TT
sys_mqxl  equ   $1c       ; QXL
sys_mqpc  equ   $1e       ; QPC
sys_java  equ   $14       ; java
sys_mfut  equ  %00000000      ; Standard QL or Futura display
sys_mmon  equ  %00100000      ; Monochone monitor
sys_mext  equ  %01000000      ; Atari Extended 4 Emulator
sys_mvme  equ  %10000000      ; Atari QVME emulator
sys_mqlc  equ  %11000000      ; QL mode LCD
sys_mvga  equ  %11000000      ; VGA
sys_maur  equ  %10100000      ; Aurora

sys_polf equ  $00a8  ; word  polling frequency
sys__polf equ    50     ; ... assumed polling frequency
sys_cfst equ  $00aa  ; word  cursor flash status

; ----------------------------------------------
; Filing system defaults

sys_defo equ    $70    ; offset to make defaults<$80
sys_prgd equ  $00ac  ; long  pointer to PRoGram Default
sys_datd equ  $00b0  ; long  pointer to DATa Default
sys_dstd equ  $00b4  ; long  pointer to DeSTination Default

sys_thgl equ  $00b8  ; long  pointer to THinG List
sys_psf  equ  $00bc  ; long  Primary stack frame pointer (SMSQ)
sys_int2i equ $00c0  ; byte  interrupt 2 in service
sys_50i  equ  $00c1  ; byte  50 Hz in service
sys_plrq equ  $00c3  ; byte  poll requested (-ve for request)
sys_clnk equ  $00c4  ; long  pointer to console linkage
sys_castt equ $00c8  ; byte  0 cache on, +ve cache temp off, -ve off
sys_casup equ $00c9  ; byte  cache suppressd timer
sys__casup equ    26  ; byte  25 full ticks
sys_iopr  equ $00ca  ; word  IO priority
sys_cbas  equ $00cc  ; long  current basic (copy of sys_jbpt)

sys_fpu   equ $00d0  ; 16 bytes

sys_prtc  equ $00e0  ; byte set if real time clock protected
sys_pmem  equ $00e1  ; byte memory protection level
sys_slug  equ $00e2  ; word slug level
sys_klock equ $00e4  ; byte key lock
sys__shk  equ     0        ; suppress HOTKEY
sys__ssf  equ     1        ; suppress screen freeze
sys__ssq  equ     2        ; suppress switch queue
sys__sbk  equ     4        ; suppress BREAK
sys__ssr  equ     6        ; suppress keyboard soft reset
sys__shr  equ     7        ; suppress keyboard hard reset
sys_mtick equ $00e6   ; word mini tick counter
sys_klnk  equ $00e8   ; long pointer to keyboard linkage

; ----------------------------------------------
; Fixed filing system working area (QL)

sys_filw equ  $00ee  ; to $0100

; ----------------------------------------------
; Filing system tables

sys_fsdd equ  $0100  ; 16*long pointers to Filing System Drive Definitions
sys_fsdt equ  $0140    ; Filing System drive Definition table Top
sys_nfsd equ  $10    ; max Number of Filing System Drive definitions
sys_fsch equ  $0140  ; long  linked list of Filing System CHannel blocks

sys_xact equ  $0144  ; byte  set if XLATE active
sys_xtab equ  $0146  ; long  pointer to XLATE table
sys_erms equ  $014a  ; long  pointer to (QDOS) error message table
sys_mstab equ $014e  ; long  pointer to (SMSQ) message table
sys_taskm equ $0154  ; 4 long  used by taskmaster - conflicts with
sys_turbo equ $0160  ; long  used by turbo
sys_qsound equ  $0164  ; long  used by qsound

sys_ldmlst equ  $0168  ; long  language dependent module list
sys_lang equ  $016c  ; word  current language

sys_vers equ  $0170  ; long  version
sys_xdly equ  $017e  ; byte  suspend delay after executing another job (3.13)
sys_ouch equ  $017f  ; byte  ouch flag (currently used to activate SGC debug)
sys_top  equ  $0180    ; TOP of system vars - bottom of Supervisor Stack

; ==============================================================
; Channel definition block

ch_len        equ   $00000000
ch_drivr      equ   $00000004
ch_owner      equ   $00000008
ch_rflag      equ   $0000000c
ch_tag        equ   $00000010
ch_stat       equ   $00000012
ch_actn       equ   $00000013
ch_jobwt      equ   $00000014
ch_qin        equ   $00000018
ch_qout       equ   $0000001c

; ==============================================================
; File system channel definition block

fs_next       equ   $00000018
fs_acces      equ   $0000001c
fs_drive      equ   $0000001d
fs_filnr      equ   $0000001e
fs_nblok      equ   $00000020
fs_nbyte      equ   $00000022
fs_eblok      equ   $00000024
fs_ebyte      equ   $00000026
fs_cblok      equ   $00000028
fs_updt       equ   $0000002c
fs_fname      equ   $00000032
fs_spare      equ   $00000058
fs_end        equ   $000000a0

; ==============================================================
; Physical definition block

fs_drivr      equ   $00000010
fs_drivn      equ   $00000014
fs_mname      equ   $00000016
fs_files      equ   $00000022

; ==============================================================
; Job control block

jb_len        equ   $00000000
jb_start      equ   $00000004
jb_owner      equ   $00000008
jb_hold       equ   $0000000c
jb_tag        equ   $00000010
jb_prior      equ   $00000012
jb_princ      equ   $00000013
jb_stat       equ   $00000014
jb_rela6      equ   $00000016
jb_wflag      equ   $00000017
jb_wjob       equ   $00000018
jb_trapv      equ   $0000001c
jb_d0         equ   $00000020
jb_d1         equ   $00000024
jb_d2         equ   $00000028
jb_d3         equ   $0000002c
jb_d4         equ   $00000030
jb_d5         equ   $00000034
jb_d6         equ   $00000038
jb_d7         equ   $0000003c
jb_a0         equ   $00000040
jb_a1         equ   $00000044
jb_a2         equ   $00000048
jb_a3         equ   $0000004c
jb_a4         equ   $00000050
jb_a5         equ   $00000054
jb_a6         equ   $00000058
jb_a7         equ   $0000005c
jb_sr         equ   $00000060
jb_pc         equ   $00000062
jb_end        equ   $00000068

; ==============================================================
; Window block definition

sd_xmin       equ   $00000018
sd_ymin       equ   $0000001a
sd_xsize      equ   $0000001c
sd_ysize      equ   $0000001e
sd_borwd      equ   $00000020
sd_xpos       equ   $00000022
sd_ypos       equ   $00000024
sd_xinc       equ   $00000026
sd_yinc       equ   $00000028
sd_scrb       equ   $00000032
sd_pmask      equ   $00000036
sd_smask      equ   $0000003a
sd_imask      equ   $0000003e
sd_cattr      equ   $00000042
sd_curf       equ   $00000043
sd_pcolr      equ   $00000044
sd_scolr      equ   $00000045
sd_icolr      equ   $00000046
sd_bcolr      equ   $00000047
sd_nlsta      equ   $00000048
sd_fmod       equ   $00000049
sd_yorg       equ   $0000004a
sd_xorg       equ   $00000050
sd_scal       equ   $00000056
sd_fbuf       equ   $0000005c
sd_fuse       equ   $00000060
sd_kbd        equ   $00000064
sd_end        equ   $00000068

; ==============================================================
; XXX TMP -- from the SMSQ/E sources

ut_chan1 equ 1

; ==============================================================
; SMS2 IOSS operations

do_io   equ  3     ; trap #3
do_relio equ  4     ; trap #4

; character/byte IO operations

iob_test equ  $00   ; TEST input
iob_fbyt equ  $01   ; Fetch BYTe from input
iob_flin equ  $02   ; Fetch LINe from input
iob_fmul equ  $03   ; Fetch MULtiple characters/bytes
iob_elin equ  $04   ; Edit LINe of characters
iob_sbyt equ  $05   ; Send BYTe to output
iob_suml equ  $06   ; Send Untranslated MuLtiple bytes
iob_smul equ  $07   ; Send MULtiple bytes

; window IO operations

iow_xtop equ  $09   ; eXTernal OPeration on screen
iow_pixq equ  $0a   ; PIXel coordinate Query
iow_chrq equ  $0b   ; CHaRacter coordinate Query
iow_defb equ  $0c   ; DEFine Border
iow_defw equ  $0d   ; DEFine Window
iow_ecur equ  $0e   ; Enable CURsor
iow_dcur equ  $0f   ; Disable CURsor
iow_scur equ  $10   ; Set CURsor position (character coordinates)
iow_scol equ  $11   ; Set cursor COLumn
iow_newl equ  $12   ; put cursor on a NEW Line
iow_pcol equ  $13   ; move cursor to Previous COLumn
iow_ncol equ  $14   ; move cursor to Next COLumn
iow_prow equ  $15   ; move cursor to Prevous ROW
iow_nrow equ  $16   ; move cursor to Next ROW
iow_spix equ  $17   ; Set cursor to PIXel position
iow_scra equ  $18   ; SCRoll All of window
iow_scrt equ  $19   ; SCRoll Top of window (above cursor)
iow_scrb equ  $1a   ; SCRoll Bottom of window (below cursor)
iow_pana equ  $1b   ; PAN All of window

iow_panl equ  $1e   ; PAN cursor Line
iow_panr equ  $1f   ; PAN Right hand end of cursor line
iow_clra equ  $20   ; CLeaR All of window
iow_clrt equ  $21   ; CLeaR Top of window (above cursor)
iow_clrb equ  $22   ; CLeaR Bottom of window (below cursor)
iow_clrl equ  $23   ; CLeaR cursor Line
iow_clrr equ  $24   ; CLeaR Right hand side of cursor line
iow_font equ  $25   ; set / read FOuNT (font U_S_A_)
iow_rclr equ  $26   ; ReCoLouR a window
iow_spap equ  $27   ; Set PAPer colour
iow_sstr equ  $28   ; Set STRip colour
iow_sink equ  $29   ; Set INK colour
iow_sfla equ  $2a   ; Set FLash Attribute
iow_sula equ  $2b   ; Set UnderLine Attribute
iow_sova equ  $2c   ; Set OVerwrite Attributes
iow_ssiz equ  $2d   ; Set character SIZe
iow_blok equ  $2e   ; fill a BLOcK with colour

iow_donl equ  $2f   ; DO a pending newline

; graphics operations

iog_dot  equ  $30   ; draw (list of) DOTs
iog_line equ  $31   ; draw (list of) LINEs
iog_arc  equ  $32   ; draw (list of) ARCs
iog_elip equ  $33   ; draw ELlIPse
iog_scal equ  $34   ; set graphics SCALe
iog_fill equ  $35   ; set area FILL
iog_sgcr equ  $36   ; Set Graphics CuRsor position


; filing system

iof_chek equ  $40   ; CHEcK all pending operations on file
iof_flsh equ  $41   ; FLuSH all buffers
iof_posa equ  $42   ; set file POSition to Absolute address
iofp_off equ    $F0FFF0FF ; key in d1, returns sector 0 offset (direct sect)
iofp_def equ    $F0FFF100 ; key in d1, returns -1 in d1 if next read is IDE
          ;     drive definition sector (real or fake)
iof_posr equ  $43   ; move file POSition Relative to current position
iof_posv equ  $44   ; set file POSition to Virtual address
iof_minf equ  $45   ; get Medium INFormation
iof_shdr equ  $46   ; Set file HeaDeR
iof_rhdr equ  $47   ; Read file HeaDeR
iof_load equ  $48   ; (scatter) LOAD file
iof_save equ  $49   ; (scatter) SAVE file
iof_rnam equ  $4a   ; ReNAMe file
iof_trnc equ  $4b   ; TRuNCate file to current position
iof_date equ  $4c   ; set or get file DATEs
iofd_get equ    -1  ; d1 key, GET date (or version)
iofd_cur equ    0  ; d1 key, set CURrent date (or version)
iofd_upd equ    0  ; d2 key, set/get UPDate date
iofd_bak equ    2  ; d2 key, set/get BAcKup date
iof_mkdr equ  $4d   ; MaKe DiRectory
iof_vers equ  $4e   ; set or get VERSion (d1 keys as iof_date)
iof_xinf equ  $4f   ; get eXtended INFormation
ioi_name equ    $00  ; string  up to 20 character medium name (null filled)
ioi_dnam equ    $16  ; string  up to 4 character long device name (e_g_ WIN)
ioi_dnum equ    $1c  ; byte    drive number
ioi_rdon equ    $1d  ; byte    set if read only
ioi_allc equ    $1e  ; word    allocation unit size (in bytes)
ioi_totl equ    $20  ; long    total medium size (in allocation units)
ioi_free equ    $24  ; long    free space on medium (in allocation units)
ioi_hdrl equ    $28  ; long    header length (per file storage overhead)
ioi_ftyp equ    $2c  ; byte    format type (1=QDOS, 2=MSDOS etc)
ioi_styp equ    $2d  ; byte    format sub-type
ioi_dens equ    $2e  ; byte    density
ioi_mtyp equ    $2f  ; byte    medium type (RAM=0, FLP=1, HD=2, CD=3)
ioi_remv equ    $30  ; byte    set if removable
ioi_xxx1 equ    $31  ; $0f    bytes set to -1
ioi_blkl equ    $40  ; information block length

;  Extended colour traps

iow_papp equ  $50   ; define paper colour (palette)
iow_strp equ  $51   ; define strip colour (palette)
iow_inkp equ  $52   ; define ink colour (palette)
iow_borp equ  $53   ; define border (palette)

iow_papt equ  $54   ; define paper colour (24 bit)
iow_strt equ  $55   ; define strip colour (24 bit)
iow_inkt equ  $56   ; define ink colour (24 bit)
iow_bort equ  $57   ; define border (24 bit)

iow_papn equ  $58   ; define paper colour (native)
iow_strn equ  $59   ; define strip colour (native)
iow_inkn equ  $5a   ; define ink colour (native)
iow_born equ  $5b   ; define border (native)

iow_blkp equ  $5c   ; draw block (palette)
iow_blkt equ  $5d   ; draw block (24 bit)
iow_blkn equ  $5e   ; draw block (native)

iow_palq equ  $60   ; define QL colour palette
iow_palt equ  $61   ; define 8 bit palette

;  Pointer I/O trap keys

iop_wpap equ  $6b   ; define wallpaper
iop_flim equ  $6c   ; Find window LIMits
iop_svpw equ  $6d   ; SaVe Part of Window
iop_rspw equ  $6e   ; ReStore Part of Window
iop_slnk equ  $6f   ; Set bytes in LiNKage block
iop_pinf equ  $70   ; pointer information
iop_rptr equ  $71   ; read pointer
iop_rpxl equ  $72   ; read pixel
iop__gcl equ    16  ;   use given colour
iop__sdr equ    17  ;   scan down right
iop__slr equ    18  ;   scan left right
iop__ssc equ    19  ;   scan same colour
iop__scn equ    31  ;   scan
iop_wblb equ  $73   ; write blob
iop_lblb equ  $74   ; write line of blobs

iop_wspt equ  $76   ; write sprite
iop_spry equ  $77   ; spray pixels
iop_film equ  $78   ; fill within mask
iop_splm equ  $79   ; set pointer limits
iop_outl equ  $7a   ; set window outline
iopo_set equ    0   ;   just set
iopo_mov equ    1   ;   move contents and set outline
iop_sptr equ  $7b   ; set pointer position
iops_rew equ    -1  ;   pointer position relative to window
iops_abs equ    0   ;   pointer position absolute
iops_reh equ    1   ;   pointer position relative to hit area
iop_pick equ  $7c   ; pick / bury window
iopp_bot equ    -1  ;   pick bottom
iopp_nlk equ    -2  ;   set no lock
iopp_frz equ    -3  ;   set freeze

iop_swdf equ  $7d   ; set window definition
iop_wsav equ  $7e   ; locate and save window
iop_wrst equ  $7f   ; restore window

; timeout keys
no_wait  equ  0
forever  equ  -1

; ==============================================================
; XXX TMP -- from SMSQ/E's <keys/con>

; Format of pointer device driver definition block

pt_scren equ  $e8    ; long  address of visible SCREeN
pt_scrsz equ  $ec    ; long  SCReen SiZe in bytes
pt_scinc equ  $f0    ; word  SCreen row INCrement
pt_xscrs equ  $f2    ; word  X SCReen Size in pixels
pt_yscrs equ  $f4    ; word  Y SCReen Size in pixels

pt_xtotl equ  $f6    ; word  X total pixels
pt_xvref equ  $f8    ; word  X visible reference for xtotl
pt_ytotl equ  $fa    ; word  Y total pixels
pt_yvref equ  $fc    ; word  Y visible reference for ytotl
pt_frate equ  $fe    ; word  frame rate

pt_bgstp equ  $102   ; word  background stipple
pt_bgclm equ  $104   ; long  background colour mask
pt_sfnt1 equ  $108   ; long  pointer to Standard FoNT 1
pt_sfnt2 equ  $10c   ; long  pointer to Standard FoNT 2

; Channel definition block

sd_linel equ  $64  ; word   line length in bytes

; ==============================================================
; Errors

; QDOS

err_nc equ  -1  ;  operation not complete
err_nj equ  -2  ;  not a (valid) job
err_om equ  -3  ;  out of memory
err_or equ  -4  ;  out of range
err_bo equ  -5  ;  buffer overflow
err_no equ  -6  ;  channel not open
err_nf equ  -7  ;  file or device not found
err_ex equ  -8  ;  file already exists
err_iu equ  -9  ;  file or device already in use
err_ef equ  -10 ;  end of file
err_df equ  -11 ;  drive full
err_bn equ  -12 ;  bad device
err_te equ  -13 ;  transmission error
err_ff equ  -14 ;  format failed
err_bp equ  -15 ;  bad parameter
err_fe equ  -16 ;  file error
err_xp equ  -17 ;  expression error
err_ov equ  -18 ;  arithmetic overflow
err_ni equ  -19 ;  not implemented (yet)
err_ro equ  -20 ;  read only
err_bl equ  -21 ;  bad line of basic
err_at equ  -22 ;  at line message
err_sc equ  -23 ;  sectors message
err_bt equ  -24 ;  boot message
err_cp equ  -25 ;  copyright message
err_pf equ  -26 ;  proc/fn message

; SMSQ

err_nc   equ    -1  ; operation Not Complete
err_ijob equ    -2  ; Invalid JOB id
err_imem equ    -3  ; Insufficient MEMory
err_orng equ    -4  ; parameter Outside permitted RaNGe (c.f. err.ipar
err_bffl equ    -5  ; BuFfer FuLl
err_ichn equ    -6  ; Invalid CHaNnel id
err_fdnf equ    -7  ; File or Device Not Found
err_itnf equ    -7  ; ITem Not Found
err_fex  equ    -8  ; File already EXists
err_fdiu equ    -9  ; File or Device or In Use
err_eof  equ    -10  ; End Of File
err_drfl equ    -11  ; DRive FuLl
err_inam equ    -12  ; Invalid file, device or thing name
err_trns equ    -13  ; TRaNSmission error
err_prty equ    -13  ; PaRiTY error
err_fmtf equ    -14  ; ForMaT drive Failed
err_ipar equ    -15  ; Invalid PARameter (c.f. err.orng)
err_mchk equ    -16  ; file system Medium CHecK failed
err_iexp equ    -17  ; Invalid EXPression
err_ovfl equ    -18  ; arithmetic OVerFLow
err_nimp equ    -19  ; operation Not IMPlemented
err_rdo  equ    -20  ; ReaD Only permitted
err_isyn equ    -21  ; Invalid SYNtax
err_noms equ    -22  ; No error message
err_accd equ    -23  ; Access denied

; ==============================================================
; Common heap header

chp_len   equ    $0000    ; long    LENgth of space in common heap, including header
chp_drlk  equ    $0004    ; long    pointer to DRiver LinKage (allocated space)
chp_nxfr  equ    $0004    ; long    rel pointer (-4) to NeXt FRee space (free_space)
chp_ownr  equ    $0008    ; long    OWNer job id (-1 if not owned)
chp_flag  equ    $000c    ; long    address of FLAG byte, set when space released
chp_end   equ    $0010
chp__len  equ    $0010

chp_free equ    -1       ;         FREE space owner

chp_orel equ    $000c    ; long    Offset of pointer to RELease code from chp_drlk

; ==============================================================

; vim: filetype=asm68k
  
  list on
  end
