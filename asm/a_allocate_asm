; a_allocate_asm

; This file is part of Sfera, a library for SuperForth
; http://programandala.net/en.program.sfera.html

; Author: Marcos Cruz (programandala.net), 2016.

; ==============================================================
; License

; You may do whatever you want with this work, so long as you
; retain the copyright/authorship/acknowledgment/credit
; notice(s) and this license in all redistributed copies and
; derived works.  There is no warranty.

; ==============================================================
; Credit

; Based on code from:

; SystemKit/KnightKit QL Utility toolkit, by Mark Knight.
; Written 1994, 1995. Public domain.
; http://www.dilwyn.me.uk/tk/index.html

; ==============================================================
; History

; 2016-01-22: Start.
;
; 2016-01-23: Fixed: the SuperForth registers were saved before
; removing the parameters from the stack, what caused they were
; returned back. Simplified: no zone marker is saved or checked
; anymore. Simplified after standard Forth: `aallocate` always
; returns the address, even when the operation fails; this makes
; the code simpler and shorter.  Documented the words after
; Forth-2012.
;
; 2016-02-08: Renamed file and labels.

; ==============================================================

  include 'inc_macros_asm'
  include 'inc_labels_asm'

  code 'aallocate',a_allocate_end  ; ( d -- da ior )

  ; Allocate _d_ bytes of contiguous data space from the common
  ; heap. If the allocation succeeds, _da_ is the aligned
  ; absolute address of the allocated space and _ior_ is zero.
  ; If the operation fails, _da_ does not represent a valid
  ; address and _ior_ is an OS error code.
  ;
  ; `aallocate` stands for "absolute allocate", and is a
  ; SuperForth-specific version of standard Forth's `allocate`,
  ; named after other SuperForth words that access absolute
  ; addresses of the system.

  pop_d       d1
  movem.l     a0-a3/d2,-(sp)  ; save the SuperForth registers

  move.l      #-1,d2          ; this job will own the memory
  moveq       #mt_alchp,d0    ; select mt.alchp, grab some heap memory
  trap        #1              ; call it to reserve the memory

  move.l      a0,d1
  movem.l     (sp)+,a0-a3/d2  ; restore the SuperForth registers
  push_d      d1              ; push the address
  push_n      d0              ; push ior

  next

a_allocate_end equ *

  code 'afree',afree_end  ; ( da -- ior )

  ; Return the contiguous region of data space indicated by _da_
  ; to the system for later allocation.  _da_ shall indicate a
  ; region of data space that was previously obtained by
  ; `aallocate`.
  ;
  ; If the operation succeeds, _ior_ is zero.  If the operation
  ; fails, _ior_ is an OS error code.
  ;
  ; `afree` stands for "absolute free", and is a
  ; SuperForth-specific version of standard Forth's `free`,
  ; named after other SuperForth words that access absolute
  ; addresses of the system.

  pop_d       d1
  movem.l a0-a3/d2,-(sp)      ; save the SuperForth registers
  move.l      d1,a0
  moveq       #mt_rechp,d0    ; select mt.rechp, return the memory
  trap        #1              ; call the system routine to return it
  moveq       #0,d0           ; ior = no error
  movem.l (sp)+,a0-a3/d2      ; restore the SuperForth registers
  push_n      d0              ; push ior
  next

afree_end equ *

  end_code_definitions

  end
