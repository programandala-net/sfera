                        ; to_a_asm

                        ; This file is part of Sfera, a library for SuperForth
                        ; http://programandala.net/en.program.sfera.html

                        ; Author: Marcos Cruz (programandala.net), 2015.

                        ; ==============================================================
                        ; License

                        ; You may do whatever you want with this work, so long as you
                        ; retain all the copyright/authorship/acknowledgment/credit
                        ; notice(s) and this license in all redistributed copies and
                        ; derived works.  There is no warranty.

                        ; ==============================================================
                        ; History

                        ; 2016-01-11: Written.
                        ; 2016-01-13: Fixed.

                        ; ==============================================================

000000                    include 'inc_macros_asm'
                        ; inc_macros_asm

                        ; This file is part of Sfera, a library for SuperForth
                        ; http://programandala.net/en.program.sfera.html

                        ; Author: Marcos Cruz (programandala.net), 2015.
                        ;
                        ; Code based on information from the SuperForth manual, by Gerry
                        ; Jackson, 1985.

                        ; ==============================================================
                        ; License

                        ; You may do whatever you want with this work, so long as you
                        ; retain all the copyright/authorship/acknowledgment/credit
                        ; notice(s) and this license in all redistributed copies and
                        ; derived works.  There is no warranty.

                        ; ==============================================================
                        ; Description

                        ; This assembly code defines the macros used by code definitions
                        ; assembled with an ordinary assembler and loaded by the word
                        ; `load-code` into the SuperForth dictionary.
                        ;
                        ; The format described below must be followed to ensure that the
                        ; correct number of bytes at the head of each word is present.
                        ; This header is :

                        ;  $4AFB          = a marker (word)
                        ;  name_length    = number of characters (byte)
                        ;  name           = in ASCII
                        ;  [padding]      = 0 or 1 byte, only if length of name is even,
                        ;                   to ensure the following code is on a word
                        ;                   boundary
                        ;  ...            = machine code

                        ; This header is created using the "code" macro which must be
                        ; used in the form

                        ;   code 'name',name_end_label
                        ;   ...     ; assembler instructions
                        ;   next    ; or `brnext` to a assemble a branch to a next
                        ; name_end_label

                        ; "name_end_label" is essential so that `load-code` knows how
                        ; much code to load into a parameter field.

                        ; Note that position independent code must be generated. You can
                        ; refer to labels in other code definitions of the same file
                        ; since the number of bytes in the above header is exactly the
                        ; same as in the SuperForth header itself.  Each code word must
                        ; end in a "next" macro or a branch to a "next" macro. See
                        ; chapter 11 of the SuperForth manual.

                        ; A 0 must be present at the end of the file to mark the end of
                        ; the all definitions, this is generated by the
                        ; "end_code_definitions" macro.

                        ; ==============================================================
                        ; History

                        ; 2016-01-09: Code copied from SuperForth 2.0. Modified for the
                        ; asmx assembler (http://xi6.com/projects/asmx/). Renamed some
                        ; labels. Adapted the documentation.
                        ;
                        ; 2016-01-13: Comments. Fixed `code` macro with local labels,
                        ; else only one word can be defined in the same file.
                        ;
                        ; 2016-01-14: Finished `pop_l`.

                        ; ==============================================================

       = 004AFB         word_marker equ $4AFB ; to mark the start of a code word

                        next macro ; Forth next

                                                    ; a1 = Forth IP
                          move.w   (a1)+,d1         ; d1 = cfa of the next word
                          movea.w  0(a2,d1.w),a5    ; a5 = content of its code
                          jmp      0(a2,a5.w)       ; execute the code

                          endm

                        brnext macro  ; jump to Forth next
                          ; XXX TODO
                          next  ; XXX TMP
                          endm

                        code macro name,after

                          dc.w word_marker                ; start of a definition
                          dc.b .name_end-.name_start      ; name length
                        .name_start
                          dc.b name                       ; name
                        .name_end
                          even                            ; pad to an even address
                          dc.w after-*-2                  ; code length

000000                    endm

                        end_code_definitions macro        ; must be placed at end of the code

                          dc.w 0

                          endm

                        push_w macro register

                          ; Push _register_ on the Forth data stack as a 1-cell number.

                          move.w d2,-(a3)         ; TOS -> NOS
                          move.w register,d2      ; register -> TOS
                          endm

                        pop_w macro register

                          ; Pop 1-cell number from the Forth data stack and move it to
                          ; _register_.

                          move.w d2,register      ; TOS -> register
                          move.w (a3)+,d2         ; NOS -> TOS
                          endm

                        push_l macro register

                          ; Push _register_ on the Forth data stack as a 2-cell number.

                          move.w d2,-(a3)         ; TOS -> NOS
                          move.w register,-(a3)   ; low part of register -> NOS
                          move.l register,d2
                          swap d2                 ; high part of register -> TOS

                          endm

                        pop_l macro register

                          ; Pop 2-cell number from the Forth data stack and move it to
                          ; _register_.

                          move.w    d2,register   ; high cell to low half of register
                          swap      register      ; high cell to high half of register
                          move.w    (a3)+,d2      ; low cell to low half of d2
                          swap      d2
                          clr.w     d2            ; clear high half of d2
                          swap      d2
                          or.l      d2,register   ; combine
                          move.w    (a3)+,d2      ; new TOS

                          endm

000000                    end

000000                    code '>A',to_a_end  ; ( a -- da )

                          ; Convert SuperForth address _a_ to absolute OS address _da_.

                          ; pop_w d0
                          ; swap d0
                          ; clr.w d0    ; clear high half while it's low
                          ; swap d0
                          ; move.l a2,d1
                          ; add.l d1,d0
                          ; push_l d0

                          ; moveq #0,d0
                          ; pop_w d0
                          ; move.l a2,d1
                          ; add.l d1,d0
                          ; push_l d0

                          ; moveq #0,d0
                          ; pop_w d0
                          ; move.l a2,a5
                          ; adda.w d0,a5
                          ; push_l a5

                          ; moveq #0,d0
                          ; pop_w d0
                          ; move.l a2,a5
                          ; adda.w d0,a5
                          ; push_l a5

                          ; pop_w d0
                          ; swap d0
                          ; clr.w d0    ; clear high half while it's low
                          ; swap d0
                          ; move.l a2,a5
                          ; adda.w d0,a5
                          ; push_l a5

000008                    pop_w d0
                          ;swap d0
                          ;clr.w d0    ; clear high half while it's low
                          ;swap d0
                        ;  sub.w #$8000,d0 ; XXX returns 19F6E8
00000C D08A               add.l a2,d0
                        ;  XXX FIXME --  `8000 >a d.`
                        ;                   should return 1976E8
00000E 90BC 00010000      sub.l #$10000,d0 ; XXX returns 1976E8
                        ;  sub.l #$8000,d0  ; XXX returns 19F6E8
                        ;                   ; XXX returns 1A76E8
                        ;  add.l #$8000,d0  ; XXX returns 1AF6E8
000014                    push_l d0


00001C                    next

       = 000026         to_a_end equ *

                          ; code '>A0',to_a0_end  ; ( a -- da )

                          ; moveq #0,d0
                          ; pop_w d0
                          ; add.l a2,d0
                          ; push_l d0
                          ; next

                        ; to_a0_end equ *

000026                    end_code_definitions

000028                    end



00000 Total Error(s)

POP_L.NAME_END     00000005    POP_L.NAME_START   00000003    TO_A_END           00000026 E
WORD_MARKER        00004AFB E
