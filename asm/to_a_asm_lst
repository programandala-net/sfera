                        ; to_a_asm

                        ; This file is part of Sfera, a library for SuperForth
                        ; http://programandala.net/en.program.sfera.html

                        ; Author: Marcos Cruz (programandala.net), 2016.

                        ; XXX UNDER DEVELOPMENT

                        ; ==============================================================
                        ; License

                        ; You may do whatever you want with this work, so long as you
                        ; retain the copyright/authorship/acknowledgment/credit
                        ; notice(s) and this license in all redistributed copies and
                        ; derived works.  There is no warranty.

                        ; ==============================================================
                        ; History

                        ; 2016-01-11: Written.
                        ; 2016-01-13: Fixed.
                        ; 2016-01-15: Notes.

                        ; ==============================================================

000000                    include 'inc_macros_asm'
                          list off
                          list nosym
                          list notemp
                          list on

000000                    end

000000                    code '>A',to_a_end  ; ( a -- da )

                          ; Convert SuperForth address _a_ to absolute OS address _da_.

                          ; XXX OLD
                          ; pop_n d0
                          ; swap d0
                          ; clr.w d0    ; clear high half while it's low
                          ; swap d0
                          ; move.l a2,d1
                          ; add.l d1,d0
                          ; push_d d0

                          ; XXX OLD
                          ; moveq #0,d0
                          ; pop_n d0
                          ; move.l a2,d1
                          ; add.l d1,d0
                          ; push_d d0

                          ; XXX OLD
                          ; moveq #0,d0
                          ; pop_n d0
                          ; move.l a2,a5
                          ; adda.w d0,a5
                          ; push_d a5

                          ; XXX OLD
                          ; moveq #0,d0
                          ; pop_n d0
                          ; move.l a2,a5
                          ; adda.w d0,a5
                          ; push_d a5

                          ; XXX OLD
                          ; pop_n d0
                          ; swap d0
                          ; clr.w d0    ; clear high half while it's low
                          ; swap d0
                          ; move.l a2,a5
                          ; adda.w d0,a5
                          ; push_d a5

000008                    pop_n d0
                          ;swap d0
                          ;clr.w d0    ; clear high half while it's low
                          ;swap d0
                        ;  sub.w #$8000,d0 ; XXX returns 19F6E8
00000C D08A               add.l a2,d0
                        ;  XXX FIXME --  `8000 >a d.`
                        ;                   should return 1976E8
00000E 90BC 00010000      sub.l #$10000,d0 ; XXX returns 1976E8 -- correct
                        ;  sub.l #$8000,d0  ; XXX returns 19F6E8
                        ;                   ; XXX returns 1A76E8
                        ;  add.l #$8000,d0  ; XXX returns 1AF6E8
000014                    push_d d0


00001C                    next

       = 000026         to_a_end equ *

                          ; code '>A0',to_a0_end  ; ( a -- da )

                          ; moveq #0,d0
                          ; pop_n d0
                          ; add.l a2,d0
                          ; push_d d0
                          ; next

                        ; to_a0_end equ *

000026                    end_code_definitions

000028                    end



00000 Total Error(s)

