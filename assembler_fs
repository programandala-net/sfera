\ assembler_fs

\ This file is part of Sfera, a library for SuperForth
\ http://programandala.net/en.program.sfera.html

\ Authors: Henry Laxen and Michael Perry, 1984.
\ Changes: Marcos Cruz (programandala.net), 2016

\ XXX UNDER DEVELOPMENT -- not usable yet

\ ==============================================================
\ License

\ You may do whatever you want with this work, so long as you
\ retain the copyright/authorship/acknowledgment/credit
\ notice(s) and this license in all redistributed copies and
\ derived works.  There is no warranty.

\ ==============================================================
\ Description

\ This is the assembler of the 68000 F83 Forth system.

\ ==============================================================
\ History

\ 2016-01-07: Copied from F83.
\
\ 2016-01-10: First changes.
\
\ 2016-01-24: Added missing `?condition`, from the sources of
\ 8080 F83. Changed `not` to `invert`.
\
\ 2016-01-25: Added `defer`. Converted the source to lowercase.

\ ==============================================================

only forth also definitions   decimal

require dev4_defer_fs

: octal  ( -- )  8 base !  ;

: next
  \ >NEXT #) JMP   \ XXX TODO
  ;
  \ a macro that assembles a jump to `>next`.
  \ nearly all `code` words end with `next`.

\ XXX OLD
\ : init    [ assembler ] word  ;

only forth also definitions

h# 4EB8 constant does-op
  \ call opcode compiled by does>.

4 constant does-size
  \ length of the call in bytes.

: does?   ( ip -- ip' f )
  dup does-size + swap @ does-op =  ;
  \   test for does> word.  used by the decompiler.

\ xxx todo
\ : label   create  assembler  [ assembler ] init  ;
  \ mark the start of a subroutine whose name returns its
  \   address.

\ xxx old
\ : code    code  [ assembler ] init  ;
  \ create a forth code word.

\ 68000 assembler                                     10jan84map

: ?condition   ( f -- )
   0= abort" conditionals wrong"   ;

assembler also definitions

: a?>mark      ( -- addr f )   here  true  ;
: a?>resolve   ( addr f -- )
  ?condition  here over - swap 1- c!  ;
: a?<mark      ( -- addr f )   here  true  ;
: a?<resolve   ( addr f -- )
  ?condition  here - here 1- c!  ;

\ Deferring the definitions of the commas, marks, and resolves
\ allows the same assembler to serve for both the system and the
\ Meta-Compiler.

\ XXX TODO -- adapt
defer c,          forth ' c,        assembler is c,
defer ,           forth ' ,         assembler is ,
defer ?>mark      ' a?>mark      is ?>mark
defer ?>resolve   ' a?>resolve   is ?>resolve
defer ?<mark      ' a?<mark      is ?<mark
defer ?<resolve   ' a?<resolve   is ?<resolve

\ 68000 meta assembler                                13apr84map

: ?,   if , then ,  ;
  \ compile one or two numbers.

octal \ convenient for the bit fields in the 68000.

VARIABLE SIZE
  \ Many 68000 instructions can operate on either 8, 16, or 32-bit
  \ data. Rather than specify the size individually for each
  \ instruction, the variable `size` contains the size information for
  \ any instruction which needs it.  size is set by `byte`,
  \ `word`, and `long`.

: byte  10000 size !  ;
: word  30100 size !  ;  word
: long  24600 size !  ;

: sz   constant does> @ size @ and or  ;
  \ define words which select certain bits from size and install
  \ them into the instruction being assembled. the size field moves
  \ around considerably.

00300 sz sz3            00400 sz sz4
04000 sz sz40           30000 sz sz300

: long?   size @ 24600 =  ;
  \ leave a flag, true if size is long.

: -sz1    long? if  100 or  then  ;
  \ handle an special case where the size field is inverted
  \ with respect to all others. nice job, motorola!

\ assembler registers and addressing modes.           18apr84map

: regs   10 0 do  dup 1001 i * or  constant  loop  drop  ;
  \ define several words each time it is used.

: mode    constant  does> @ swap 7007 and or  ;
  \ Define modifiers which will follow an address register.
  \ Examples:
  \ D0 thru D7 are data registers.
  \ A0 thru A7 are address registers.
  \ D0 A1 ) MOVE   Move contents of D0 to where A1 points.
  \ A7 )+ D1 MOVE   pop item off stack pointed to by A7 into D1.
  \ D2 A6 -) MOVE   push D2 onto stack pointed to by A6.
  \ 12 A3 D) CLR   clear address 12 bytes past where A3 points.
  \ 34 D3 A4 DI) NEG  negate contents of address at A4+D3+34.
  \ 1234 #) JMP  jump to absolute address 1234. *NOTE* sign extends!
  \ 12.3456 L#) JMP  jump to long absolute address 123456.
  \ 56 PCD) D4 MOVE get contents of address at PC+56 into D4.
  \ 78 D5 PCDI) NOT complement contents of address at PC+D5+78.
  \ 9876 # D6 MOVE  put the value 9876 into D6.

0000 regs     d0   d1   d2   d3   d4   d5   d6   d7
0110 regs     a0   a1   a2   a3   a4   a5   a6   a7
0220 mode     )         ( address register indirect )
0330 mode     )+        ( adr reg ind post-increment )
0440 mode     -)        ( adr reg ind pre-decrement )
0550 mode     d)        ( adr reg ind displaced )
0660 mode     di)       ( adr reg ind displaced indexed )
0770 constant #)        ( immediate address )
1771 constant l#)       ( immediate long address )
2772 constant pcd)      ( pc relative displaced )
3773 constant pcdi)     ( pc relative displaced indexed )
4774 constant #         ( immediate data )

\ fields and register assignments                     02apr84map

: field   constant  does> @ and  ;
  \ define words which mask off various bit fields.

7000 field rd   \ select the destination register field
0007 field rs   \ select the source register field

0070 field ms   \ select the source mode field
0077 field eas  \ select the source effective address field
0377 field low  \ select the low byte

: dn?   ( ea -- ea flag )  dup ms 0=  ;
  \ test for data register mode.
: src   ( ea instr -- ea instr' )   over eas or  ;
  \ merge the source register and mode into the instruction.
: dst   ( ea instr -- ea instr' )   swap rd  or  ;
  \ merge the destination register into the instruction.

  \ xxx todo --- adapt
A7 constant sp   ( stack pointer )
A6 constant rp   ( return stack pointer )
A5 constant ip   ( interpreter pointer )
A4 constant w    ( working register )
  \ These are the register assignments for the virtual Forth machine
  \ You can refer to the virtual machine registers, for example:
  \ RP )+ SP -) MOVE  pops the top item from the return stack onto
  \ the data stack.
  \ NOTE:   registers A4-A7 and D7 are used, all others are free.
  \  Registers which are used by Forth must be saved and restored
  \  by any routine which uses them.

\ extended addressing                                 31oct83map

\ many of the 68000's addressing modes require additional bytes
\ following the opcode.

: double?  ( mode -- flag )   dup l#) = swap # = long? and or  ;
  \ leave true if the given mode requires 32 bits of extra
  \   addressing information.

: index?   ( {n} mode -- {m} mode )
   dup >r  dup 0770 and a0 di) =  swap pcdi) =  or
   if   dup rd 10 * swap ms  if  100000 or  then
        sz40 swap low or
   then  r>  ;
  \ do nothing unless the given mode is an indexed mode,
  \ in which case it packs the extra data into the required format.

: more?   ( ea -- ea flag )  dup ms 0040 >  ;
  \ test for extra addressing words.

: ,more   ( ea -- )   more?
   if  index?  double?  ?,  else  drop  then  ;
  \ assemble the extra words.

\ extended addressing  extras                         10jan84map

create extra   here 5 dup allot erase
  \ a temporary storage area for extended addressing operands.

: extra?   ( {n} mode -- mode )   more?
    if >r  r@ index?  double?  extra 1+ swap
       if  2! 2  else  ! 1 then  extra c!  r>
    else   0 extra !
    then  ;
  \ test a mode for extra words. if present, they are
  \  saved in `extra` to get them out of the way until needed.

: ,extra   ( -- )
  extra c@  ?dup
  if  extra 1+ swap 1 =
      if  @ ,  else  2@ 2,  then  extra 5 erase
  then  ;
  \ retrieve the words in `extra`, if any, and assembles
  \ them.

\ immediates & address register specific              31Oct83map

: imm
  constant
  does> @ >r extra? eas r> or sz3 ,
  long? ?,  ,extra  ;  ( n ea )
  \ defining word for immediate instructions.

0000 imm ori            1000 imm andi
2000 imm subi           3000 imm addi
5000 imm eori           6000 imm cmpi

: immsr   constant  does> @ sz3 2,  ;  ( n )
  \ defining word for immediate to ststus register instructions.

001074 immsr andi>sr
005074 immsr eori>sr
000074 immsr ori>sr

: iq   constant does> @ >r  extra?  eas swap rs 1000 * or
  \ defining word for quick instructions.

   r> or sz3 , ,extra  ;  ( n ea )
050000 iq addq          050400 iq subq

: ieaa   constant  does> @ dst src sz4 , ,more  ;  ( ea an )
  \    defining word for effective address to address register
  \    instructions.

150300 ieaa adda        130300 ieaa cmpa
040700 ieaa lea         110300 ieaa suba

\ shifts, rotates, and bit manipulation               31oct83map

: isr
  constant  does> @ >r dn?
  if    swap dn? if  r> 40 or >r  else drop swap 1000 * then
        rd swap rs or r> or 160000 or sz3 ,
  else  dup eas 300 or r@ 400 and or r> 70 and 100 * or
        160000 or , ,more
  then  ;  ( dm dn ) ( m # dn ) ( ea )
  \    defining word for shifts and rotates.

400 isr asl             000 isr asr
410 isr lsl             010 isr lsr
420 isr roxl            020 isr roxr
430 isr rol             030 isr ror
: ibit   constant  does> @ >r  extra?  dn?
   if  rd src 400  else  drop dup eas 4000  then
   or r> or , ,extra ,more  ;  ( ea dn ) ( ea n # )
  \    defining word for bit manipulators.

000 ibit btst           100 ibit bchg
200 ibit bclr           300 ibit bset

\ branch, loop, and set conditionals                  18Apr84map

\   There are three classes of conditional instructions: branch,
\ decrement and branch, and set. In each case there is a four bit
\ field which contains the condition code. This field is the only
\ difference between members of a class. Rather than explicitly
\ define sixteen words for each class, the word SETCLASS is used
\ to define all sixteen at once by re-executing the defining word
\ with a different value for the condition code each time. Of the
\ 48 words so defined, only DXIT and SNO are useless.

: setclass    ' swap 0 do i over execute loop drop  ;

  \   Compiler directives like SETCLASS can be very useful. It would
  \ be better if there was a way to throw them away after use. I am
  \ planning to add a TRANSIENT definitions capability for this and
  \ other reasons.

: ibra   400 * 060000 or constant    ( label )
          does> @ swap ?>mark drop 2+ - dup abs 200 <
          if  low or ,  else  swap 2,  then  ;
20 setclass ibra   bra bsr bhi bls bcc bcs bne beq
                   bvc bvs bpl bmi bge blt bgt ble
: idbr  400 * 050310 or constant    ( label \ dn - )
          does> @ swap rs or , ?>mark drop - ,  ;
20 setclass idbr   dxit dbra dbhi dbls dbcc dbcs dbne dbeq
                   dbvc dbvs dbpl dbmi dbge dblt dbgt dble
: iset    400 * 050300 or constant    ( ea )
          does> @ src , ,more  ;
20 setclass iset   set sno shi sls scc scs sne seq
                   svc svs spl smi sge slt sgt sle

\ moves                                               10Jan84map

\ These are the MOVE instructions in all their glory.
\ Notice that I have added LMOVE. This is because the 68000 treats
\ addresses as signed numbers. When a 16 bit address is loaded
\ into an address register, it is sign-extended. This is never
\ what I want. Values loaded into data registers is not extended,
\ so I often load 16 bits into a data register, then move all 32
\ bits into an address register to get an unextended address.
\ Data register 7 is reserved in this system for this purpose.
\ LMOVE lets me do the above nonsense without switching to between
\ LONG and WORD sizes constantly.
\ To keep the assembler simple, some words use modified Motorola
\ mnemonics. HEX FFFF SP -) MOVEM> will save all registers on the
\ stack. ( pronounced MOVEM-OUT ).

: move       extra? 7700 and src sz300 ,
       ,more ,extra  ;  ( ea ea )
: moveq      rd swap low or 070000 or ,  ;  ( n dn )
: move>usp   rs 047140 or ,  ;  ( an )
: move<usp   rs 047150 or ,  ;  ( an )
: movem>
   extra? eas   044200 or -sz1 , , ,extra  ;  ( n ea )
: movem<
   extra? eas   046200 or -sz1 , , ,extra  ;  ( n ea )
: movep      dn? if    rd swap rs or 410 or
                 else   rs rot rd or 610 or then  -sz1 2,  ;
   ( dm d an ) ( d an dm )
: lmove      7700 and swap eas or 20000 or ,  ;
  ( long reg move )

\ odds and ends                                       16jan84map

  \ examples:
  \ a5 )+ a3 )+ cmpm
  \ d0 a3 exg

  \ d2 ext
  \ d1 swap
  \ 1234 stop
  \ 3 trap
  \ 8 a6 link
  \ a6 unlk
  \ d0 a5 ) eor
  \ a7 )+ d0 cmp

: cmpm   rd swap rs or 130410 or sz3 ,  ;  ( an@+ am@+ )

: exg   dn? if   swap dn?  if  140500 else 140610 then >r
            else swap dn?  if  140610 else 140510 then >r swap
            then  rs dst r> or ,  ;  ( rn rm )
: ext    rs 044200 or -sz1 ,  ;  ( dn )
: swap   rs 044100 or ,  ;  ( dn )
: stop   47162 2,  ;  ( n )
: trap   17 and 47100 or ,  ;  ( n )
: link   rs 047120 or 2,  ;  ( n an )
: unlk   rs 047130 or ,  ;  ( an )
: eor   extra? eas dst sz3 130400 or , ,extra  ;  ( dn ea )
: cmp   130000 dst src sz3 , ,more  ;  ( ea dn )

\ arithmetic and logic                                08apr84map

: ibcd   constant  does> @ dst over rs or [ forth ] swap ms
        if  10 or  then  ,  ;  ( dn dm ) ( an@- am@- )
  \    defining word for binary coded decimal instructions.

140400 ibcd abcd         100400 ibcd sbcd
: idd   constant  does> @ dst over rs or [ forth ] swap ms
        if  10 or  then  sz3 ,  ;  ( dn dm ) ( an@- am@- )
  \    defining word for extended instructions.
  \   e.g. a1 -) a2 -) addx     d0 d1 addx

150400 idd addx         110400 idd subx

: idea   constant  does> @ >r dn?  ( ea dn ) ( dn ea )
    if  rd src r> or sz3 , ,more
    else  extra? eas dst 400 or r> or sz3 , ,extra  then  ;
  \   defining word for some arithmetic and logical instructions.

150000 idea add         110000 idea sub
140000 idea and         100000 idea or

: iead   constant  does> @ dst src     , ,more  ;  ( ea dn )
  \   defining word for some arithmetic and logical instructions.

040600 iead chk
100300 iead divu        100700 iead divs
140300 iead mulu        140700 iead muls

\ arithmetic and control                              31oct83map

: iea    constant  does> @ src , ,more  ;  ( ea )
  \   defining word for instructions which take only an effective
  \   address.

047200 iea jsr          047300 iea jmp
042300 iea move>ccr
040300 iea move<sr      043300 iea move>sr
044000 iea nbcd         044100 iea pea
045300 iea tas

: ieas  constant  does> @ src sz3 , ,more  ;  ( ea )
  \   defining word for instructions which take only an effective
  \   address, and are affected by `size`.

047200 iea jsr          047300 iea jmp
042300 iea move>ccr
041000 ieas clr         043000 ieas invert
042000 ieas neg         040000 ieas negx
045000 ieas tst

: icon   constant  does> @  ,  ;
  \   defining word for instructions which take no arguments.

47160 icon reset        47161 icon nop
47163 icon rte          47165 icon rts

\ structured conditionals  +/- 256 bytes              08Apr84map

\   These words implement structured conditionals for the
\ assembler. This is a much cleaner way to express control flow
\ than the usual technique of random jumps to nonsense labels.
\ e.g.   D0 D0 OR  0= IF   5 # D1 ADD  ELSE  3 # D1 ADD  THEN
\        BEGIN  A0 ) D0 MOVE  0<> WHILE  D0 A0 MOVE  REPEAT
\        5 D3 DO   1 D6 ADDQ   LOOP

\ The last is especially interesting. It will repeat the code
\ between DO and LOOP 5 times using D3 as a counter.
\ Note that any DBcc can replace LOOP.

\ IF, WHILE, and UNTIL all expect a branch opcode on the stack.
\ The most commonly used ones are defined here as constants named
\ for the corresponding condition.

hex

: then    ?>resolve  ;
: if      , ?>mark  ;
: else    6000 if  2swap  then  ;
: begin   ?<mark  ;
: until   , ?<resolve  ;
: again   6000 until  ;
: while   if  ;
: repeat  2swap again then  ;
: do      ?>mark drop [ forth ] swap  ;
: loop    dbra  ;

6600 constant 0=   6700 constant 0<>
6A00 constant 0<   6B00 constant 0>=
6C00 constant <    6D00 constant >=
6E00 constant <=   6F00 constant >

decimal
